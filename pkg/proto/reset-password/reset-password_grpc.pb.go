// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.0--rc1
// source: pkg/proto/reset-password/reset-password.proto

package reset_password

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResetPasswordServiceClient is the client API for ResetPasswordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResetPasswordServiceClient interface {
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
}

type resetPasswordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResetPasswordServiceClient(cc grpc.ClientConnInterface) ResetPasswordServiceClient {
	return &resetPasswordServiceClient{cc}
}

func (c *resetPasswordServiceClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, "/resetpassword.ResetPasswordService/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResetPasswordServiceServer is the server API for ResetPasswordService service.
// All implementations must embed UnimplementedResetPasswordServiceServer
// for forward compatibility
type ResetPasswordServiceServer interface {
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	mustEmbedUnimplementedResetPasswordServiceServer()
}

// UnimplementedResetPasswordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResetPasswordServiceServer struct {
}

func (UnimplementedResetPasswordServiceServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedResetPasswordServiceServer) mustEmbedUnimplementedResetPasswordServiceServer() {}

// UnsafeResetPasswordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResetPasswordServiceServer will
// result in compilation errors.
type UnsafeResetPasswordServiceServer interface {
	mustEmbedUnimplementedResetPasswordServiceServer()
}

func RegisterResetPasswordServiceServer(s grpc.ServiceRegistrar, srv ResetPasswordServiceServer) {
	s.RegisterService(&ResetPasswordService_ServiceDesc, srv)
}

func _ResetPasswordService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResetPasswordServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resetpassword.ResetPasswordService/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResetPasswordServiceServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResetPasswordService_ServiceDesc is the grpc.ServiceDesc for ResetPasswordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResetPasswordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resetpassword.ResetPasswordService",
	HandlerType: (*ResetPasswordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResetPassword",
			Handler:    _ResetPasswordService_ResetPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/reset-password/reset-password.proto",
}
